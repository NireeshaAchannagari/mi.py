import tkinter as tk
from tkinter import ttk
import speech_recognition as sr

# Language to subjects mapping
language_subjects = {
    "English": ["Math", "Science", "English Grammar"],
    "Hindi": ["рдЧрдгрд┐рдд", "рд╡рд┐рдЬреНрдЮрд╛рди", "рд╣рд┐рдВрджреА рд╡реНрдпрд╛рдХрд░рдг"],
    "Telugu": ["р░Чр░гр░┐р░др░В", "р░╕р▒Ир░ир▒Нр░╕р▒Н", "р░др▒Жр░▓р▒Бр░Чр▒Б р░╡р▒Нр░пр░╛р░Хр░░р░гр░В"],
    "Kannada": ["р▓Чр▓гр▓┐р▓д", "р▓╡р▓┐р▓Ьр│Нр▓Юр▓╛р▓и", "р▓Хр▓ир│Нр▓ир▓б р▓╡р│Нр▓пр▓╛р▓Хр▓░р▓г"],
    "Tamil": ["роХрогро┐родроорпН", "роЕро▒ро┐ро╡рпБ", "родрооро┐ро┤рпН роЗро▓роХрпНроХрогроорпН"]
}

# Subject content mapping
subject_contents = {
    "Math": {
        "5-10": "Learn basic addition, subtraction, multiplication, and division.",
        "11-15": "Explore algebra, geometry, and basic calculus.",
        "16-18": "Advanced topics in calculus, trigonometry, and statistics."
    },
    "Science": {
        "5-10": "Explore plants, animals, and basic experiments.",
        "11-15": "Learn about physics, chemistry, and biology.",
        "16-18": "Study advanced topics in physics, chemistry, and environmental science."
    },
    "English Grammar": {
        "5-10": "Practice nouns, verbs, tenses, and sentence formation.",
        "11-15": "Learn about advanced tenses, parts of speech, and complex sentence structures.",
        "16-18": "Master writing essays, research papers, and advanced grammar."
    },
    "рдЧрдгрд┐рдд": {
        "5-10": "рдЬреЛрдбрд╝, рдШрдЯрд╛рд╡, рдЧреБрдгрд╛ рдФрд░ рднрд╛рдЧ рд╕реАрдЦреЗрдВред",
        "11-15": "рдмреАрдЬрдЧрдгрд┐рдд, рд░реЗрдЦрд╛рдЧрдгрд┐рдд рдФрд░ рдЧрдгрдирд╛ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдЬрд╛рдиреЗрдВред",
        "16-18": "рдХреИрд▓реНрдХреБрд▓рд╕, рддреНрд░рд┐рдХреЛрдгрдорд┐рддрд┐ рдФрд░ рд╕рд╛рдВрдЦреНрдпрд┐рдХреА рдореЗрдВ рдЙрдиреНрдирдд рд╡рд┐рд╖рдпред"
    },
    "рд╡рд┐рдЬреНрдЮрд╛рди": {
        "5-10": "рдкреМрдзреЗ, рдЬрд╛рдирд╡рд░ рдФрд░ рдкреНрд░рдпреЛрдЧреЛрдВ рдХрд╛ рдЕрдзреНрдпрдпрди рдХрд░реЗрдВред",
        "11-15": "рднреМрддрд┐рдХреА, рд░рд╕рд╛рдпрди рд╡рд┐рдЬреНрдЮрд╛рди рдФрд░ рдЬреАрд╡рд╡рд┐рдЬреНрдЮрд╛рди рд╕реАрдЦреЗрдВред",
        "16-18": "рднреМрддрд┐рдХреА, рд░рд╕рд╛рдпрди рд╡рд┐рдЬреНрдЮрд╛рди рдФрд░ рдкрд░реНрдпрд╛рд╡рд░рдг рд╡рд┐рдЬреНрдЮрд╛рди рдХреЗ рдЙрдиреНрдирдд рд╡рд┐рд╖рдп рдкрдврд╝реЗрдВред"
    },
    "рд╣рд┐рдВрджреА рд╡реНрдпрд╛рдХрд░рдг": {
        "5-10": "рд╕рдВрдЬреНрдЮрд╛, рдХреНрд░рд┐рдпрд╛, рдХрд╛рд▓ рдФрд░ рд╡рд╛рдХреНрдп рд░рдЪрдирд╛ред",
        "11-15": "рд╡рд┐рд╕реНрддреГрдд рд╡рд╛рдХреНрдп рд░рдЪрдирд╛рдПрдВ рдФрд░ рдХрд╛рд╡реНрдпрд╢рд╛рд╕реНрддреНрд░ рдЕрдзреНрдпрдпрди рдХрд░реЗрдВред",
        "16-18": "рд╡реНрдпрд╛рдХрд░рдг рдХреЗ рдЬрдЯрд┐рд▓ рдирд┐рдпрдореЛрдВ рдХрд╛ рдЕрдзреНрдпрдпрди рдХрд░реЗрдВред"
    },
    "р░Чр░гр░┐р░др░В": {
        "5-10": "р░Ер░бр▒Нр░бр░┐р░╖р░ир▒Н, р░╕р░мр▒Нр░Яр▒Нр░░р░╛р░Хр▒Нр░╖р░ир▒Н, р░ор░▓р▒Нр░Яр░┐р░кр▒Нр░▓р░┐р░Хр▒Зр░╖р░ир▒Н р░ор░░р░┐р░пр▒Б р░бр░┐р░╡р░┐р░Ьр░ир▒Н р░ир▒Зр░░р▒Нр░Ър▒Бр░Хр▒Лр░Вр░бр░┐.",
        "11-15": "р░мр▒Ар░Ьр░Чр░гр░┐р░др░В, р░░р▒Зр░Цр░╛р░Чр░гр░┐р░др░В р░ор░░р░┐р░пр▒Б р░Хр▒Зр░▓р▒Нр░Хр▒Бр░▓р░╕р▒Н р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░др▒Жр░▓р▒Бр░╕р▒Бр░Хр▒Лр░Вр░бр░┐.",
        "16-18": "р░Ер░зр░┐р░Х р░░р▒Зр░Яр░┐р░Вр░Чр▒НтАМр░▓р▒Б, р░Яр▒Нр░░р░┐р░Чр▒Лр░ир▒Лр░ор▒Жр░Яр▒Нр░░р▒А р░ор░░р░┐р░пр▒Б р░Чр░гр░╛р░Вр░Хр░╛р░▓р▒Б."
    },
    "р░╕р▒Ир░ир▒Нр░╕р▒Н": {
        "5-10": "р░Ър▒Жр░Яр▒Нр░▓р▒Б, р░Ьр░Вр░др▒Бр░╡р▒Бр░▓р▒Б р░ор░░р░┐р░пр▒Б р░кр▒Нр░░р░╛р░ер░ор░┐р░Х р░кр▒Нр░░р░пр▒Лр░Чр░╛р░▓р▒Б р░др▒Жр░▓р▒Бр░╕р▒Бр░Хр▒Лр░Вр░бр░┐.",
        "11-15": "р░нр▒Мр░др░┐р░Х р░╢р░╛р░╕р▒Нр░др▒Нр░░р░В, р░░р░╕р░╛р░пр░и р░╢р░╛р░╕р▒Нр░др▒Нр░░р░В р░ор░░р░┐р░пр▒Б р░Ьр▒Ар░╡р░╢р░╛р░╕р▒Нр░др▒Нр░░р░В р░др▒Жр░▓р▒Бр░╕р▒Бр░Хр▒Лр░Вр░бр░┐.",
        "16-18": "р░нр▒Мр░др░┐р░Х р░╢р░╛р░╕р▒Нр░др▒Нр░░р░В, р░░р░╕р░╛р░пр░и р░╢р░╛р░╕р▒Нр░др▒Нр░░р░В р░ор░░р░┐р░пр▒Б р░кр░░р▒Нр░пр░╛р░╡р░░р░г р░╢р░╛р░╕р▒Нр░др▒Нр░░р░В р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░др▒Жр░▓р▒Бр░╕р▒Бр░Хр▒Лр░Вр░бр░┐."
    },
    "р░др▒Жр░▓р▒Бр░Чр▒Б р░╡р▒Нр░пр░╛р░Хр░░р░гр░В": {
        "5-10": "р░ир░╛р░ор░╡р░╛р░Ър░Хр░╛р░▓р▒Б, р░Хр▒Нр░░р░┐р░пр░▓р▒Б р░ор░░р░┐р░пр▒Б р░╡р░╛р░Хр▒Нр░п р░ир░┐р░░р▒Нр░ор░╛р░гр░В р░Ер░нр▒Нр░пр░╕р░┐р░Вр░Ър░Вр░бр░┐.",
        "11-15": "р░Ьр░ир░░р░▓р▒Н р░╡р▒Нр░пр░╛р░Хр░░р░гр░В р░ор░░р░┐р░пр▒Б р░Хр░╡р░┐р░др▒Нр░╡р░В р░╕р░╛р░зр░и.",
        "16-18": "р░кр░░р░┐р░╖р▒Нр░Хр░░р░г р░╡р▒Нр░пр░╛р░Хр░░р░гр░В р░ор░░р░┐р░пр▒Б р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г."
    },
    "р▓Чр▓гр▓┐р▓д": {
        "5-10": "р▓Ьр│Лр▓бр▓гр│Ж, р▓Хр▓бр▓┐р▓д, р▓Чр│Бр▓гр▓╛р▓Хр▓╛р▓░ р▓ор▓др│Нр▓др│Б р▓нр▓╛р▓Чр▓╛р▓Хр▓╛р▓░р▓╡р▓ир│Нр▓ир│Б р▓Хр▓▓р▓┐р▓пр▓┐р▓░р▓┐.",
        "11-15": "р▓мр│Ар▓Ьр▓Чр▓гр▓┐р▓д, р▓░р│Зр▓Цр▓╛р▓Чр▓гр▓┐р▓д р▓ор▓др│Нр▓др│Б р▓Хр│Зр▓▓р│Нр▓Хр│Бр▓▓р▓╕р│Н р▓Хр│Бр▓░р▓┐р▓др▓Вр▓др│Ж р▓др▓┐р▓│р▓┐р▓жр│Бр▓Хр│Кр▓│р│Нр▓│р▓┐.",
        "16-18": "р▓Ер▓нр│Нр▓пр▓╛р▓╕ р▓Хр▓▓р▓┐р▓Хр│Жр▓Чр│Ж р▓Йр▓ир│Нр▓ир▓д р▓ор▓Яр│Нр▓Яр▓жр▓▓р│Нр▓▓р▓┐ р▓Хр│Зр▓▓р│Нр▓Хр│Бр▓▓р▓╕р│Н, р▓Яр│Нр▓░р▓┐р▓Чр│Лр▓ир│Лр▓ор│Жр▓Яр│Нр▓░р▓┐ р▓ор▓др│Нр▓др│Б р▓Чр▓гр▓┐р▓д р▓╕р▓Вр▓╢р│Лр▓зр▓ир│Ж."
    },
    "р▓╡р▓┐р▓Ьр│Нр▓Юр▓╛р▓и": {
        "5-10": "р▓╕р▓╕р│Нр▓пр▓Чр▓│р│Б, р▓кр│Нр▓░р▓╛р▓гр▓┐р▓Чр▓│р│Б р▓ор▓др│Нр▓др│Б р▓кр│Нр▓░р▓пр│Лр▓Чр▓Чр▓│ р▓Ер▓░р▓┐р▓╡р│Б.",
        "11-15": "р▓нр│Мр▓др▓╢р▓╛р▓╕р│Нр▓др│Нр▓░, р▓░р▓╛р▓╕р▓╛р▓пр▓ир▓╢р▓╛р▓╕р│Нр▓др│Нр▓░ р▓ор▓др│Нр▓др│Б р▓Ьр│Ар▓╡р▓╢р▓╛р▓╕р│Нр▓др│Нр▓░р▓╡р▓ир│Нр▓ир│Б р▓др▓┐р▓│р▓┐р▓жр│Бр▓Хр│Кр▓│р│Нр▓│р▓┐.",
        "16-18": "р▓нр│Мр▓др▓╢р▓╛р▓╕р│Нр▓др│Нр▓░, р▓░р▓╛р▓╕р▓╛р▓пр▓ир▓╢р▓╛р▓╕р│Нр▓др│Нр▓░ р▓ор▓др│Нр▓др│Б р▓кр▓░р▓┐р▓╕р▓░ р▓╡р▓┐р▓Ьр│Нр▓Юр▓╛р▓ир▓жр▓▓р│Нр▓▓р▓┐ р▓Йр▓ир│Нр▓ир▓д р▓╡р▓┐р▓╖р▓пр▓Чр▓│р│Б."
    },
    "р▓Хр▓ир│Нр▓ир▓б р▓╡р│Нр▓пр▓╛р▓Хр▓░р▓г": {
        "5-10": "р▓ир▓╛р▓ор▓кр▓ж, р▓Хр│Нр▓░р▓┐р▓пр▓╛р▓кр▓ж р▓ор▓др│Нр▓др│Б р▓╡р▓╛р▓Хр│Нр▓п р▓░р▓Ър▓ир│Ж.",
        "11-15": "р▓╡р▓┐р▓╢р▓┐р▓╖р│Нр▓Я р▓╡р▓╛р▓Хр│Нр▓п р▓░р▓Ър▓ир│Ж р▓ор▓др│Нр▓др│Б р▓Хр▓╡р▓┐р▓др│Нр▓╡.",
        "16-18": "р▓Ер▓зр▓┐р▓Х р▓Ьр▓Яр▓┐р▓▓р▓др│Жр▓Чр▓│р▓╛р▓ж р▓╡р▓╛р▓Хр│Нр▓пр▓░р▓Ър▓ир│Ж р▓Ер▓зр│Нр▓пр▓пр▓и."
    },
    "роХрогро┐родроорпН": {
        "5-10": "роХрпВроЯрпНроЯро▓рпН, роХро┤ро┐родрпНродро▓рпН, рокрпЖро░рпБроХрпНроХро▓рпН, ро╡роХрпБродрпНродро▓рпН роХро▒рпНрокрпЛроорпН.",
        "11-15": "рокрпАроЬроХрогро┐родроорпН, ро╡ро░рпИроХрогро┐родроорпН рооро▒рпНро▒рпБроорпН роХро╛ро╕рпНроХрпБро▓ро╕рпН рокро▒рпНро▒ро┐ роЕро▒ро┐роирпНродрпБроХрпКро│рпНро│рпБроЩрпНроХро│рпН.",
        "16-18": "роорпЗроорпНрокроЯрпНроЯ роХрогро┐родроорпН рооро▒рпНро▒рпБроорпН роХрогро┐род роЖро░ро╛ропрпНроЪрпНроЪро┐."
    },
    "роЕро▒ро┐ро╡рпБ": {
        "5-10": "рооро░роЩрпНроХро│рпН, ро╡ро┐ро▓роЩрпНроХрпБроХро│рпН рооро▒рпНро▒рпБроорпН роЕроЯро┐рокрпНрокроЯрпИ роЕро▒ро┐ро╡ро┐ропро▓рпН.",
        "11-15": "рокрпБро╡ро┐ропро┐ропро▓рпН, ро╡рпЗродро┐ропро┐ропро▓рпН рооро▒рпНро▒рпБроорпН роЙропро┐ро░ро┐ропро▓рпН роХро▒рпНро▒рпБроХрпНроХрпКро│рпНро│рпБроЩрпНроХро│рпН.",
        "16-18": "рокрпБро╡ро┐ропро┐ропро▓рпН, ро╡рпЗродро┐ропро┐ропро▓рпН рооро▒рпНро▒рпБроорпН роЪрпБро▒рпНро▒рпБроЪрпНроЪрпВро┤ро▓рпН роЕро▒ро┐ро╡ро┐ропро▓рпН рокроЯро┐роХрпНроХро╡рпБроорпН."
    },
    "родрооро┐ро┤рпН роЗро▓роХрпНроХрогроорпН": {
        "5-10": "рокрпЖропро░рпНроЪрпНроЪрпКро▓рпН, ро╡ро┐ройрпИроЪрпНроЪрпКро▓рпН, роХро╛ро▓роЩрпНроХро│рпН рооро▒рпНро▒рпБроорпН ро╡ро╛роХрпНроХро┐ропроЩрпНроХро│рпН.",
        "11-15": "роорпБройрпНройрогро┐ родрооро┐ро┤рпН роЗро▓роХрпНроХрогроорпН рооро▒рпНро▒рпБроорпН роХро╡ро┐родрпИроХро│рпН.",
        "16-18": "роЖродро┐роХ роЗро▓роХрогрпНроорпБро▒рпИ рокроЯро┐рокрпНрокрпБроХро│рпБроХрпНроХрпБ роорпБройрпНрокродро┐ро╡рпБроХро│рпН."
    }
}

class LanguageApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Language Based Learning with Voice")
        self.root.geometry("650x550")
        self.root.configure(bg="#F9F9F9")

        self.age_label = tk.Label(root, text="Enter Your Age:", font=("Arial", 12), bg="#F9F9F9")
        self.age_label.pack(pady=10)

        self.age_entry = tk.Entry(root, font=("Arial", 12), width=10)
        self.age_entry.pack()

        self.age_voice_btn = tk.Button(root, text="ЁЯОЩ Speak Age", command=self.speak_age, bg="#A5D6A7")
        self.age_voice_btn.pack(pady=5)

        self.lang_label = tk.Label(root, text="Choose a Language:", font=("Arial", 12), bg="#F9F9F9")
        self.lang_label.pack(pady=10)

        self.lang_combo = ttk.Combobox(root, values=list(language_subjects.keys()), state="readonly", font=("Arial", 12))
        self.lang_combo.pack()

        self.lang_voice_btn = tk.Button(root, text="ЁЯОЩ Speak Language", command=self.speak_language, bg="#90CAF9")
        self.lang_voice_btn.pack(pady=5)

        self.lang_combo.bind("<<ComboboxSelected>>", self.show_subjects)

        self.subject_frame = tk.Frame(root, bg="#F9F9F9")
        self.subject_frame.pack(pady=10)

        self.content_label = tk.Label(root, text="", font=("Arial", 11), wraplength=600, justify="left", bg="#F9F9F9", fg="#444")
        self.content_label.pack(pady=10)

    def speak_age(self):
        age = self.recognize_voice(prompt="Say your age")
        if age and age.isdigit():
            self.age_entry.delete(0, tk.END)
            self.age_entry.insert(0, age)

    def speak_language(self):
        lang = self.recognize_voice(prompt="Say your language")
        if lang:
            for option in language_subjects.keys():
                if lang.lower() in option.lower():
                    self.lang_combo.set(option)
                    self.show_subjects(None)
                    break

    def recognize_voice(self, prompt="Speak now"):
        recognizer = sr.Recognizer()
        with sr.Microphone() as source:
            print(prompt)
            try:
                audio = recognizer.listen(source, timeout=5)
                text = recognizer.recognize_google(audio)
                print("Recognized:", text)
                return text.strip()
            except Exception as e:
                print("Error:", e)
                return ""

    def show_subjects(self, event):
        for widget in self.subject_frame.winfo_children():
            widget.destroy()

        selected_lang = self.lang_combo.get()
        age = self.age_entry.get()

        if not age.isdigit() or not (5 <= int(age) <= 18):
            self.content_label.config(text="Please enter a valid age between 5 and 18.")
            return

        subjects = language_subjects.get(selected_lang, [])
        tk.Label(self.subject_frame, text="Recommended Subjects:", font=("Arial", 12, "bold"), bg="#F9F9F9").pack()

        for subj in subjects:
            btn = tk.Button(self.subject_frame, text=subj, font=("Arial", 11), bg="#E3F2FD", fg="black",
                            command=lambda s=subj: self.show_content(s))
            btn.pack(pady=5, ipadx=10)

    def show_content(self, subject):
        age = self.age_entry.get()
        if age.isdigit():
            age_range = self.get_age_range(int(age))
            content = subject_contents.get(subject, {}).get(age_range, "Content coming soon!")
        else:
            content = "Please enter a valid age between 5 and 18."
        self.content_label.config(text=content)

    def get_age_range(self, age):
        if 5 <= age <= 10:
            return "5-10"
        elif 11 <= age <= 15:
            return "11-15"
        elif 16 <= age <= 18:
            return "16-18"
        return "5-10"  # Default case

if __name__ == "__main__":
    root = tk.Tk()
    app = LanguageApp(root)
    root.mainloop()
